enum ListingStatus {
  ACTIVE
  SOLD
  CANCELLED 
}

enum StakingStatus{
  ACTIVE
  RENTED
  EXPIRED
}
enum OfferStatus{
  ACTIVE
  DECLINE
  ACCEPTED
  EXPIRED
  UNACTIVE
}

enum Category{
  ARTWORK,
  SPORTS,
  PHOTOGRAPHY,
  GAMEFI,
  CELEBRITY,
  RWANFT,
  EXPLICIT
  }

enum ActionType{
  OFFER,
  LIST,
  RENT,
  SALE,
  MINT,
}

enum OfferForUserNftStatus{
  ACTIVE,
  ACCEPTED,
  DENIED
}

type Listing @entity { 
  id: ID!
  seller: Bytes!
  token: Bytes!
  tokenId: BigInt!
  price: BigInt!
  tokenURI: String
  listingStatus:ListingStatus!
  tokenName: String!
  tokenDescription: String!
  hasOffer:Boolean!
  collectionId:BigInt
  collectionName:String

}

type StakingListing @entity { 
  id: ID!
  seller: Bytes!
  token: Bytes!
  tokenId: BigInt!
  tokenURI: String
  stakingStatus:StakingStatus!
  tokenName: String!
  tokenDescription: String!
  colloteralWei:BigInt!
  premiumWei:BigInt!
  deadlineUTC:BigInt!
  hasOffer:Boolean!
  collectionName: String
  collectionId: BigInt
}

type StakingOffer @entity {
  id: ID!
  taker: Bytes!
  stakingId:BigInt!
  newOfferedColloteral:BigInt!
  newOfferedPremiumWei:BigInt!
  owner:Bytes!
  tokenURI: String
  tokenId: BigInt!
  tokenName:String
  tokenAdress: Bytes!
  offerStatus:OfferStatus!

}

type BuyingOffer @entity {
  id: ID!
  taker: Bytes!
  listingId:BigInt!
  newOfferedPrice:BigInt!
  owner:Bytes!
  tokenURI: String
  tokenId: BigInt!
  tokenName:String
  tokenAdress: Bytes!
  offerStatus:OfferStatus!

}
type Token @entity {
  id: ID!
  name:String!
  uri:String!
  desciption:String!
  creator:Bytes!
  owner:Bytes!
  collectionId: BigInt!
  collection: Collection!
  collectionName: String!
  price:BigInt
  colloteral:BigInt
  premiumWei:BigInt

}

type Collection @entity {
  id: ID!
  owner: Bytes!
  collectionName:String!
  collectionInfo:String!
  collectionUrl:String!
  collectionCategory:Category!
  collectionVolume:BigInt!
  collectionItemsAmount:BigInt!
  tokens: [Token!]! @derivedFrom(field: "collection")
}
# event OfferForNotListed(OfferStatus status, uint256 offerId,uint256 tokenId, uint256 collectionId, uint256 amount);

type OfferForUserNft @entity {
  id: ID!
  offerId: BigInt!
  collectionId:BigInt!
  offeredAmount:BigInt!
  offerStatus:OfferForUserNftStatus!
  from:Bytes
  to:Bytes
}
# type Statistic @entity {
#   id:ID!
#   from:Bytes!
#   to:Bytes!
#   price:BigInt
#   colloteralWei:BigInt
#   premiumWei:BigInt
#   timeStamp:BigInt!
#   actionType:ActionType!
# }