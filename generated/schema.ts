// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Listing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Listing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Listing", id.toString(), this);
    }
  }

  static load(id: string): Listing | null {
    return changetype<Listing | null>(store.get("Listing", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get listingStatus(): string {
    let value = this.get("listingStatus");
    return value!.toString();
  }

  set listingStatus(value: string) {
    this.set("listingStatus", Value.fromString(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value!.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get tokenDescription(): string {
    let value = this.get("tokenDescription");
    return value!.toString();
  }

  set tokenDescription(value: string) {
    this.set("tokenDescription", Value.fromString(value));
  }

  get hasOffer(): boolean {
    let value = this.get("hasOffer");
    return value!.toBoolean();
  }

  set hasOffer(value: boolean) {
    this.set("hasOffer", Value.fromBoolean(value));
  }

  get collectionId(): BigInt | null {
    let value = this.get("collectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectionId(value: BigInt | null) {
    if (!value) {
      this.unset("collectionId");
    } else {
      this.set("collectionId", Value.fromBigInt(<BigInt>value));
    }
  }

  get collectionName(): string | null {
    let value = this.get("collectionName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectionName(value: string | null) {
    if (!value) {
      this.unset("collectionName");
    } else {
      this.set("collectionName", Value.fromString(<string>value));
    }
  }
}

export class StakingListing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingListing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingListing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakingListing", id.toString(), this);
    }
  }

  static load(id: string): StakingListing | null {
    return changetype<StakingListing | null>(store.get("StakingListing", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get stakingStatus(): string {
    let value = this.get("stakingStatus");
    return value!.toString();
  }

  set stakingStatus(value: string) {
    this.set("stakingStatus", Value.fromString(value));
  }

  get tokenName(): string {
    let value = this.get("tokenName");
    return value!.toString();
  }

  set tokenName(value: string) {
    this.set("tokenName", Value.fromString(value));
  }

  get tokenDescription(): string {
    let value = this.get("tokenDescription");
    return value!.toString();
  }

  set tokenDescription(value: string) {
    this.set("tokenDescription", Value.fromString(value));
  }

  get colloteralWei(): BigInt {
    let value = this.get("colloteralWei");
    return value!.toBigInt();
  }

  set colloteralWei(value: BigInt) {
    this.set("colloteralWei", Value.fromBigInt(value));
  }

  get premiumWei(): BigInt {
    let value = this.get("premiumWei");
    return value!.toBigInt();
  }

  set premiumWei(value: BigInt) {
    this.set("premiumWei", Value.fromBigInt(value));
  }

  get deadlineUTC(): BigInt {
    let value = this.get("deadlineUTC");
    return value!.toBigInt();
  }

  set deadlineUTC(value: BigInt) {
    this.set("deadlineUTC", Value.fromBigInt(value));
  }

  get hasOffer(): boolean {
    let value = this.get("hasOffer");
    return value!.toBoolean();
  }

  set hasOffer(value: boolean) {
    this.set("hasOffer", Value.fromBoolean(value));
  }

  get collectionName(): string | null {
    let value = this.get("collectionName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set collectionName(value: string | null) {
    if (!value) {
      this.unset("collectionName");
    } else {
      this.set("collectionName", Value.fromString(<string>value));
    }
  }

  get collectionId(): BigInt | null {
    let value = this.get("collectionId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collectionId(value: BigInt | null) {
    if (!value) {
      this.unset("collectionId");
    } else {
      this.set("collectionId", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class StakingOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakingOffer", id.toString(), this);
    }
  }

  static load(id: string): StakingOffer | null {
    return changetype<StakingOffer | null>(store.get("StakingOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get stakingId(): BigInt {
    let value = this.get("stakingId");
    return value!.toBigInt();
  }

  set stakingId(value: BigInt) {
    this.set("stakingId", Value.fromBigInt(value));
  }

  get newOfferedColloteral(): BigInt {
    let value = this.get("newOfferedColloteral");
    return value!.toBigInt();
  }

  set newOfferedColloteral(value: BigInt) {
    this.set("newOfferedColloteral", Value.fromBigInt(value));
  }

  get newOfferedPremiumWei(): BigInt {
    let value = this.get("newOfferedPremiumWei");
    return value!.toBigInt();
  }

  set newOfferedPremiumWei(value: BigInt) {
    this.set("newOfferedPremiumWei", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(<string>value));
    }
  }

  get tokenAdress(): Bytes {
    let value = this.get("tokenAdress");
    return value!.toBytes();
  }

  set tokenAdress(value: Bytes) {
    this.set("tokenAdress", Value.fromBytes(value));
  }

  get offerStatus(): string {
    let value = this.get("offerStatus");
    return value!.toString();
  }

  set offerStatus(value: string) {
    this.set("offerStatus", Value.fromString(value));
  }
}

export class BuyingOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BuyingOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BuyingOffer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BuyingOffer", id.toString(), this);
    }
  }

  static load(id: string): BuyingOffer | null {
    return changetype<BuyingOffer | null>(store.get("BuyingOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get taker(): Bytes {
    let value = this.get("taker");
    return value!.toBytes();
  }

  set taker(value: Bytes) {
    this.set("taker", Value.fromBytes(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    return value!.toBigInt();
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get newOfferedPrice(): BigInt {
    let value = this.get("newOfferedPrice");
    return value!.toBigInt();
  }

  set newOfferedPrice(value: BigInt) {
    this.set("newOfferedPrice", Value.fromBigInt(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(<string>value));
    }
  }

  get tokenAdress(): Bytes {
    let value = this.get("tokenAdress");
    return value!.toBytes();
  }

  set tokenAdress(value: Bytes) {
    this.set("tokenAdress", Value.fromBytes(value));
  }

  get offerStatus(): string {
    let value = this.get("offerStatus");
    return value!.toString();
  }

  set offerStatus(value: string) {
    this.set("offerStatus", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get desciption(): string {
    let value = this.get("desciption");
    return value!.toString();
  }

  set desciption(value: string) {
    this.set("desciption", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get collectionId(): BigInt {
    let value = this.get("collectionId");
    return value!.toBigInt();
  }

  set collectionId(value: BigInt) {
    this.set("collectionId", Value.fromBigInt(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value!.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get collectionName(): string {
    let value = this.get("collectionName");
    return value!.toString();
  }

  set collectionName(value: string) {
    this.set("collectionName", Value.fromString(value));
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get colloteral(): BigInt | null {
    let value = this.get("colloteral");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set colloteral(value: BigInt | null) {
    if (!value) {
      this.unset("colloteral");
    } else {
      this.set("colloteral", Value.fromBigInt(<BigInt>value));
    }
  }

  get premiumWei(): BigInt | null {
    let value = this.get("premiumWei");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set premiumWei(value: BigInt | null) {
    if (!value) {
      this.unset("premiumWei");
    } else {
      this.set("premiumWei", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get collectionName(): string {
    let value = this.get("collectionName");
    return value!.toString();
  }

  set collectionName(value: string) {
    this.set("collectionName", Value.fromString(value));
  }

  get collectionInfo(): string {
    let value = this.get("collectionInfo");
    return value!.toString();
  }

  set collectionInfo(value: string) {
    this.set("collectionInfo", Value.fromString(value));
  }

  get collectionUrl(): string {
    let value = this.get("collectionUrl");
    return value!.toString();
  }

  set collectionUrl(value: string) {
    this.set("collectionUrl", Value.fromString(value));
  }

  get collectionCategory(): string {
    let value = this.get("collectionCategory");
    return value!.toString();
  }

  set collectionCategory(value: string) {
    this.set("collectionCategory", Value.fromString(value));
  }

  get collectionVolume(): BigInt {
    let value = this.get("collectionVolume");
    return value!.toBigInt();
  }

  set collectionVolume(value: BigInt) {
    this.set("collectionVolume", Value.fromBigInt(value));
  }

  get collectionItemsAmount(): BigInt {
    let value = this.get("collectionItemsAmount");
    return value!.toBigInt();
  }

  set collectionItemsAmount(value: BigInt) {
    this.set("collectionItemsAmount", Value.fromBigInt(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}
