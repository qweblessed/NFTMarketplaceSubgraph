// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelBid extends ethereum.Event {
  get params(): CancelBid__Params {
    return new CancelBid__Params(this);
  }
}

export class CancelBid__Params {
  _event: CancelBid;

  constructor(event: CancelBid) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CancelStaking extends ethereum.Event {
  get params(): CancelStaking__Params {
    return new CancelStaking__Params(this);
  }
}

export class CancelStaking__Params {
  _event: CancelStaking;

  constructor(event: CancelStaking) {
    this._event = event;
  }

  get stakingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FinishRentalForCollateral extends ethereum.Event {
  get params(): FinishRentalForCollateral__Params {
    return new FinishRentalForCollateral__Params(this);
  }
}

export class FinishRentalForCollateral__Params {
  _event: FinishRentalForCollateral;

  constructor(event: FinishRentalForCollateral) {
    this._event = event;
  }

  get rentalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FinishRentalForNFT extends ethereum.Event {
  get params(): FinishRentalForNFT__Params {
    return new FinishRentalForNFT__Params(this);
  }
}

export class FinishRentalForNFT__Params {
  _event: FinishRentalForNFT;

  constructor(event: FinishRentalForNFT) {
    this._event = event;
  }

  get rentalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class Listed extends ethereum.Event {
  get params(): Listed__Params {
    return new Listed__Params(this);
  }
}

export class Listed__Params {
  _event: Listed;

  constructor(event: Listed) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ListingOffer extends ethereum.Event {
  get params(): ListingOffer__Params {
    return new ListingOffer__Params(this);
  }
}

export class ListingOffer__Params {
  _event: ListingOffer;

  constructor(event: ListingOffer) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ListingOfferCompleted extends ethereum.Event {
  get params(): ListingOfferCompleted__Params {
    return new ListingOfferCompleted__Params(this);
  }
}

export class ListingOfferCompleted__Params {
  _event: ListingOfferCompleted;

  constructor(event: ListingOfferCompleted) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OfferForNotListed extends ethereum.Event {
  get params(): OfferForNotListed__Params {
    return new OfferForNotListed__Params(this);
  }
}

export class OfferForNotListed__Params {
  _event: OfferForNotListed;

  constructor(event: OfferForNotListed) {
    this._event = event;
  }

  get status(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get offerId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get collectionId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class QuotedForStaking extends ethereum.Event {
  get params(): QuotedForStaking__Params {
    return new QuotedForStaking__Params(this);
  }
}

export class QuotedForStaking__Params {
  _event: QuotedForStaking;

  constructor(event: QuotedForStaking) {
    this._event = event;
  }

  get stakingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateral(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Rental extends ethereum.Event {
  get params(): Rental__Params {
    return new Rental__Params(this);
  }
}

export class Rental__Params {
  _event: Rental;

  constructor(event: Rental) {
    this._event = event;
  }

  get rentalId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get taker(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Sale extends ethereum.Event {
  get params(): Sale__Params {
    return new Sale__Params(this);
  }
}

export class Sale__Params {
  _event: Sale;

  constructor(event: Sale) {
    this._event = event;
  }

  get listingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class StakingOfferAccepted extends ethereum.Event {
  get params(): StakingOfferAccepted__Params {
    return new StakingOfferAccepted__Params(this);
  }
}

export class StakingOfferAccepted__Params {
  _event: StakingOfferAccepted;

  constructor(event: StakingOfferAccepted) {
    this._event = event;
  }

  get stakingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get taker(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakingOffered extends ethereum.Event {
  get params(): StakingOffered__Params {
    return new StakingOffered__Params(this);
  }
}

export class StakingOffered__Params {
  _event: StakingOffered;

  constructor(event: StakingOffered) {
    this._event = event;
  }

  get stakingId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get taker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get premium(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class marketplace___listingsResult {
  value0: i32;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: i32,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getStatus(): i32 {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getPrice(): BigInt {
    return this.value2;
  }

  getToken(): Address {
    return this.value3;
  }

  getTokenId(): BigInt {
    return this.value4;
  }

  getStartListingUTC(): BigInt {
    return this.value5;
  }

  getTokenPaymentsAmount(): BigInt {
    return this.value6;
  }

  getCashback(): BigInt {
    return this.value7;
  }

  getIsTokenFee(): boolean {
    return this.value8;
  }
}

export class marketplace___stakingsResult {
  value0: i32;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: Address;
  value11: BigInt;

  constructor(
    value0: i32,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: Address,
    value11: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    return map;
  }

  getStatus(): i32 {
    return this.value0;
  }

  getMaker(): Address {
    return this.value1;
  }

  getTaker(): Address {
    return this.value2;
  }

  getCollateral(): BigInt {
    return this.value3;
  }

  getPremium(): BigInt {
    return this.value4;
  }

  getStartRentalUTC(): BigInt {
    return this.value5;
  }

  getStartStakingUTC(): BigInt {
    return this.value6;
  }

  getPaymentsAmount(): BigInt {
    return this.value7;
  }

  getTokenPaymentsAmount(): BigInt {
    return this.value8;
  }

  getDeadline(): BigInt {
    return this.value9;
  }

  getToken(): Address {
    return this.value10;
  }

  getTokenId(): BigInt {
    return this.value11;
  }
}

export class marketplace___stakingsExtensionResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getCashback(): BigInt {
    return this.value0;
  }

  getIsTokenFee(): boolean {
    return this.value1;
  }
}

export class marketplace__getListingResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get price(): BigInt {
    return this[2].toBigInt();
  }

  get token(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get startListingUTC(): BigInt {
    return this[5].toBigInt();
  }

  get tokenPaymentsAmount(): BigInt {
    return this[6].toBigInt();
  }

  get cashback(): BigInt {
    return this[7].toBigInt();
  }

  get isTokenFee(): boolean {
    return this[8].toBoolean();
  }
}

export class marketplace__getStakingResultValue0Struct extends ethereum.Tuple {
  get status(): i32 {
    return this[0].toI32();
  }

  get maker(): Address {
    return this[1].toAddress();
  }

  get taker(): Address {
    return this[2].toAddress();
  }

  get collateral(): BigInt {
    return this[3].toBigInt();
  }

  get premium(): BigInt {
    return this[4].toBigInt();
  }

  get startRentalUTC(): BigInt {
    return this[5].toBigInt();
  }

  get startStakingUTC(): BigInt {
    return this[6].toBigInt();
  }

  get paymentsAmount(): BigInt {
    return this[7].toBigInt();
  }

  get tokenPaymentsAmount(): BigInt {
    return this[8].toBigInt();
  }

  get deadline(): BigInt {
    return this[9].toBigInt();
  }

  get token(): Address {
    return this[10].toAddress();
  }

  get tokenId(): BigInt {
    return this[11].toBigInt();
  }
}

export class marketplace__nftListingIdsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValueExists(): boolean {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class marketplace__nftStakingIdsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValueExists(): boolean {
    return this.value0;
  }

  getValue(): BigInt {
    return this.value1;
  }
}

export class marketplace extends ethereum.SmartContract {
  static bind(address: Address): marketplace {
    return new marketplace("marketplace", address);
  }

  NFTTokenDistributionWhiteLister(): Address {
    let result = super.call(
      "NFTTokenDistributionWhiteLister",
      "NFTTokenDistributionWhiteLister():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_NFTTokenDistributionWhiteLister(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "NFTTokenDistributionWhiteLister",
      "NFTTokenDistributionWhiteLister():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NFTsEligibleForTokenDistribution(param0: Address): boolean {
    let result = super.call(
      "NFTsEligibleForTokenDistribution",
      "NFTsEligibleForTokenDistribution(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_NFTsEligibleForTokenDistribution(
    param0: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "NFTsEligibleForTokenDistribution",
      "NFTsEligibleForTokenDistribution(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _listings(param0: BigInt): marketplace___listingsResult {
    let result = super.call(
      "_listings",
      "_listings(uint256):(uint8,address,uint256,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new marketplace___listingsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean()
    );
  }

  try__listings(
    param0: BigInt
  ): ethereum.CallResult<marketplace___listingsResult> {
    let result = super.tryCall(
      "_listings",
      "_listings(uint256):(uint8,address,uint256,address,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplace___listingsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean()
      )
    );
  }

  _listingsLastIndex(): BigInt {
    let result = super.call(
      "_listingsLastIndex",
      "_listingsLastIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__listingsLastIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_listingsLastIndex",
      "_listingsLastIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _offerLastIndex(): BigInt {
    let result = super.call(
      "_offerLastIndex",
      "_offerLastIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__offerLastIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_offerLastIndex",
      "_offerLastIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _stakings(param0: BigInt): marketplace___stakingsResult {
    let result = super.call(
      "_stakings",
      "_stakings(uint256):(uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new marketplace___stakingsResult(
      result[0].toI32(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toAddress(),
      result[11].toBigInt()
    );
  }

  try__stakings(
    param0: BigInt
  ): ethereum.CallResult<marketplace___stakingsResult> {
    let result = super.tryCall(
      "_stakings",
      "_stakings(uint256):(uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplace___stakingsResult(
        value[0].toI32(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toAddress(),
        value[11].toBigInt()
      )
    );
  }

  _stakingsExtension(param0: BigInt): marketplace___stakingsExtensionResult {
    let result = super.call(
      "_stakingsExtension",
      "_stakingsExtension(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new marketplace___stakingsExtensionResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try__stakingsExtension(
    param0: BigInt
  ): ethereum.CallResult<marketplace___stakingsExtensionResult> {
    let result = super.tryCall(
      "_stakingsExtension",
      "_stakingsExtension(uint256):(uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplace___stakingsExtensionResult(
        value[0].toBigInt(),
        value[1].toBoolean()
      )
    );
  }

  _stakingsLastIndex(): BigInt {
    let result = super.call(
      "_stakingsLastIndex",
      "_stakingsLastIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__stakingsLastIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_stakingsLastIndex",
      "_stakingsLastIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canRentNFT(stakingId: BigInt): boolean {
    let result = super.call("canRentNFT", "canRentNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(stakingId)
    ]);

    return result[0].toBoolean();
  }

  try_canRentNFT(stakingId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("canRentNFT", "canRentNFT(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(stakingId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  dateOfNextPayment(stakingId: BigInt): BigInt {
    let result = super.call(
      "dateOfNextPayment",
      "dateOfNextPayment(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );

    return result[0].toBigInt();
  }

  try_dateOfNextPayment(stakingId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "dateOfNextPayment",
      "dateOfNextPayment(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getContractBalanceV2(): BigInt {
    let result = super.call(
      "getContractBalanceV2",
      "getContractBalanceV2():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBalanceV2(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBalanceV2",
      "getContractBalanceV2():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(listingId: BigInt): marketplace__getListingResultValue0Struct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((uint8,address,uint256,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(listingId)]
    );

    return changetype<marketplace__getListingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getListing(
    listingId: BigInt
  ): ethereum.CallResult<marketplace__getListingResultValue0Struct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((uint8,address,uint256,address,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromUnsignedBigInt(listingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<marketplace__getListingResultValue0Struct>(value[0].toTuple())
    );
  }

  getStaking(stakingId: BigInt): marketplace__getStakingResultValue0Struct {
    let result = super.call(
      "getStaking",
      "getStaking(uint256):((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );

    return changetype<marketplace__getStakingResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getStaking(
    stakingId: BigInt
  ): ethereum.CallResult<marketplace__getStakingResultValue0Struct> {
    let result = super.tryCall(
      "getStaking",
      "getStaking(uint256):((uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<marketplace__getStakingResultValue0Struct>(value[0].toTuple())
    );
  }

  isBuyable(listingId: BigInt): boolean {
    let result = super.call("isBuyable", "isBuyable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(listingId)
    ]);

    return result[0].toBoolean();
  }

  try_isBuyable(listingId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBuyable", "isBuyable(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(listingId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCollateralClaimable(stakingId: BigInt): boolean {
    let result = super.call(
      "isCollateralClaimable",
      "isCollateralClaimable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );

    return result[0].toBoolean();
  }

  try_isCollateralClaimable(stakingId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCollateralClaimable",
      "isCollateralClaimable(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(stakingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxCollateralEligibleForTokens(): BigInt {
    let result = super.call(
      "maxCollateralEligibleForTokens",
      "maxCollateralEligibleForTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxCollateralEligibleForTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxCollateralEligibleForTokens",
      "maxCollateralEligibleForTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftListingIds(
    param0: Address,
    param1: BigInt
  ): marketplace__nftListingIdsResult {
    let result = super.call(
      "nftListingIds",
      "nftListingIds(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new marketplace__nftListingIdsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_nftListingIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<marketplace__nftListingIdsResult> {
    let result = super.tryCall(
      "nftListingIds",
      "nftListingIds(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplace__nftListingIdsResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  nftStakingIds(
    param0: Address,
    param1: BigInt
  ): marketplace__nftStakingIdsResult {
    let result = super.call(
      "nftStakingIds",
      "nftStakingIds(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new marketplace__nftStakingIdsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_nftStakingIds(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<marketplace__nftStakingIdsResult> {
    let result = super.tryCall(
      "nftStakingIds",
      "nftStakingIds(address,uint256):(bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new marketplace__nftStakingIdsResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  paymentsDue(stakingId: BigInt): BigInt {
    let result = super.call("paymentsDue", "paymentsDue(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(stakingId)
    ]);

    return result[0].toBigInt();
  }

  try_paymentsDue(stakingId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("paymentsDue", "paymentsDue(uint256):(int256)", [
      ethereum.Value.fromUnsignedBigInt(stakingId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platform(): Address {
    let result = super.call("platform", "platform():(address)", []);

    return result[0].toAddress();
  }

  try_platform(): ethereum.CallResult<Address> {
    let result = super.tryCall("platform", "platform():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokensDistributionAmount(): BigInt {
    let result = super.call(
      "tokensDistributionAmount",
      "tokensDistributionAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensDistributionAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensDistributionAmount",
      "tokensDistributionAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensDistributionEnd(): BigInt {
    let result = super.call(
      "tokensDistributionEnd",
      "tokensDistributionEnd():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensDistributionEnd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensDistributionEnd",
      "tokensDistributionEnd():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  undasToken(): Address {
    let result = super.call("undasToken", "undasToken():(address)", []);

    return result[0].toAddress();
  }

  try_undasToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("undasToken", "undasToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wETH(): Address {
    let result = super.call("wETH", "wETH():(address)", []);

    return result[0].toAddress();
  }

  try_wETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("wETH", "wETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AcceptListingOfferCall extends ethereum.Call {
  get inputs(): AcceptListingOfferCall__Inputs {
    return new AcceptListingOfferCall__Inputs(this);
  }

  get outputs(): AcceptListingOfferCall__Outputs {
    return new AcceptListingOfferCall__Outputs(this);
  }
}

export class AcceptListingOfferCall__Inputs {
  _call: AcceptListingOfferCall;

  constructor(call: AcceptListingOfferCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get taker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AcceptListingOfferCall__Outputs {
  _call: AcceptListingOfferCall;

  constructor(call: AcceptListingOfferCall) {
    this._call = call;
  }
}

export class AcceptOfferForNotListedTokenCall extends ethereum.Call {
  get inputs(): AcceptOfferForNotListedTokenCall__Inputs {
    return new AcceptOfferForNotListedTokenCall__Inputs(this);
  }

  get outputs(): AcceptOfferForNotListedTokenCall__Outputs {
    return new AcceptOfferForNotListedTokenCall__Outputs(this);
  }
}

export class AcceptOfferForNotListedTokenCall__Inputs {
  _call: AcceptOfferForNotListedTokenCall;

  constructor(call: AcceptOfferForNotListedTokenCall) {
    this._call = call;
  }

  get offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AcceptOfferForNotListedTokenCall__Outputs {
  _call: AcceptOfferForNotListedTokenCall;

  constructor(call: AcceptOfferForNotListedTokenCall) {
    this._call = call;
  }
}

export class AcceptStakingOfferCall extends ethereum.Call {
  get inputs(): AcceptStakingOfferCall__Inputs {
    return new AcceptStakingOfferCall__Inputs(this);
  }

  get outputs(): AcceptStakingOfferCall__Outputs {
    return new AcceptStakingOfferCall__Outputs(this);
  }
}

export class AcceptStakingOfferCall__Inputs {
  _call: AcceptStakingOfferCall;

  constructor(call: AcceptStakingOfferCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get taker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get isTokenFee(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class AcceptStakingOfferCall__Outputs {
  _call: AcceptStakingOfferCall;

  constructor(call: AcceptStakingOfferCall) {
    this._call = call;
  }
}

export class BidAndStakeCall extends ethereum.Call {
  get inputs(): BidAndStakeCall__Inputs {
    return new BidAndStakeCall__Inputs(this);
  }

  get outputs(): BidAndStakeCall__Outputs {
    return new BidAndStakeCall__Outputs(this);
  }
}

export class BidAndStakeCall__Inputs {
  _call: BidAndStakeCall;

  constructor(call: BidAndStakeCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get premiumWei(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadlineUTC(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get priceWei(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get isTokenFee(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }
}

export class BidAndStakeCall__Outputs {
  _call: BidAndStakeCall;

  constructor(call: BidAndStakeCall) {
    this._call = call;
  }
}

export class BidExternalCall extends ethereum.Call {
  get inputs(): BidExternalCall__Inputs {
    return new BidExternalCall__Inputs(this);
  }

  get outputs(): BidExternalCall__Outputs {
    return new BidExternalCall__Outputs(this);
  }
}

export class BidExternalCall__Inputs {
  _call: BidExternalCall;

  constructor(call: BidExternalCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get priceWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isTokenFee(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class BidExternalCall__Outputs {
  _call: BidExternalCall;

  constructor(call: BidExternalCall) {
    this._call = call;
  }
}

export class BuyTokenCall extends ethereum.Call {
  get inputs(): BuyTokenCall__Inputs {
    return new BuyTokenCall__Inputs(this);
  }

  get outputs(): BuyTokenCall__Outputs {
    return new BuyTokenCall__Outputs(this);
  }
}

export class BuyTokenCall__Inputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyTokenCall__Outputs {
  _call: BuyTokenCall;

  constructor(call: BuyTokenCall) {
    this._call = call;
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }
}

export class CancelListingOfferCall extends ethereum.Call {
  get inputs(): CancelListingOfferCall__Inputs {
    return new CancelListingOfferCall__Inputs(this);
  }

  get outputs(): CancelListingOfferCall__Outputs {
    return new CancelListingOfferCall__Outputs(this);
  }
}

export class CancelListingOfferCall__Inputs {
  _call: CancelListingOfferCall;

  constructor(call: CancelListingOfferCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelListingOfferCall__Outputs {
  _call: CancelListingOfferCall;

  constructor(call: CancelListingOfferCall) {
    this._call = call;
  }
}

export class CancelStakingOfferCall extends ethereum.Call {
  get inputs(): CancelStakingOfferCall__Inputs {
    return new CancelStakingOfferCall__Inputs(this);
  }

  get outputs(): CancelStakingOfferCall__Outputs {
    return new CancelStakingOfferCall__Outputs(this);
  }
}

export class CancelStakingOfferCall__Inputs {
  _call: CancelStakingOfferCall;

  constructor(call: CancelStakingOfferCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelStakingOfferCall__Outputs {
  _call: CancelStakingOfferCall;

  constructor(call: CancelStakingOfferCall) {
    this._call = call;
  }
}

export class ClaimCollateralCall extends ethereum.Call {
  get inputs(): ClaimCollateralCall__Inputs {
    return new ClaimCollateralCall__Inputs(this);
  }

  get outputs(): ClaimCollateralCall__Outputs {
    return new ClaimCollateralCall__Outputs(this);
  }
}

export class ClaimCollateralCall__Inputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimCollateralCall__Outputs {
  _call: ClaimCollateralCall;

  constructor(call: ClaimCollateralCall) {
    this._call = call;
  }
}

export class ClaimTokensListingCall extends ethereum.Call {
  get inputs(): ClaimTokensListingCall__Inputs {
    return new ClaimTokensListingCall__Inputs(this);
  }

  get outputs(): ClaimTokensListingCall__Outputs {
    return new ClaimTokensListingCall__Outputs(this);
  }
}

export class ClaimTokensListingCall__Inputs {
  _call: ClaimTokensListingCall;

  constructor(call: ClaimTokensListingCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimTokensListingCall__Outputs {
  _call: ClaimTokensListingCall;

  constructor(call: ClaimTokensListingCall) {
    this._call = call;
  }
}

export class ClaimTokensRentCall extends ethereum.Call {
  get inputs(): ClaimTokensRentCall__Inputs {
    return new ClaimTokensRentCall__Inputs(this);
  }

  get outputs(): ClaimTokensRentCall__Outputs {
    return new ClaimTokensRentCall__Outputs(this);
  }
}

export class ClaimTokensRentCall__Inputs {
  _call: ClaimTokensRentCall;

  constructor(call: ClaimTokensRentCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClaimTokensRentCall__Outputs {
  _call: ClaimTokensRentCall;

  constructor(call: ClaimTokensRentCall) {
    this._call = call;
  }
}

export class DenyOfferForNotListedTokenCall extends ethereum.Call {
  get inputs(): DenyOfferForNotListedTokenCall__Inputs {
    return new DenyOfferForNotListedTokenCall__Inputs(this);
  }

  get outputs(): DenyOfferForNotListedTokenCall__Outputs {
    return new DenyOfferForNotListedTokenCall__Outputs(this);
  }
}

export class DenyOfferForNotListedTokenCall__Inputs {
  _call: DenyOfferForNotListedTokenCall;

  constructor(call: DenyOfferForNotListedTokenCall) {
    this._call = call;
  }

  get offerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DenyOfferForNotListedTokenCall__Outputs {
  _call: DenyOfferForNotListedTokenCall;

  constructor(call: DenyOfferForNotListedTokenCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _platform(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _NFTTokenDistributionWhiteLister(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokensDistributionAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxCollateralEligibleForTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _factory(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _wETH(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ListingOfferCall extends ethereum.Call {
  get inputs(): ListingOfferCall__Inputs {
    return new ListingOfferCall__Inputs(this);
  }

  get outputs(): ListingOfferCall__Outputs {
    return new ListingOfferCall__Outputs(this);
  }
}

export class ListingOfferCall__Inputs {
  _call: ListingOfferCall;

  constructor(call: ListingOfferCall) {
    this._call = call;
  }

  get listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ListingOfferCall__Outputs {
  _call: ListingOfferCall;

  constructor(call: ListingOfferCall) {
    this._call = call;
  }
}

export class OfferForNotListedTokenCall extends ethereum.Call {
  get inputs(): OfferForNotListedTokenCall__Inputs {
    return new OfferForNotListedTokenCall__Inputs(this);
  }

  get outputs(): OfferForNotListedTokenCall__Outputs {
    return new OfferForNotListedTokenCall__Outputs(this);
  }
}

export class OfferForNotListedTokenCall__Inputs {
  _call: OfferForNotListedTokenCall;

  constructor(call: OfferForNotListedTokenCall) {
    this._call = call;
  }

  get collectionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenContract(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class OfferForNotListedTokenCall__Outputs {
  _call: OfferForNotListedTokenCall;

  constructor(call: OfferForNotListedTokenCall) {
    this._call = call;
  }
}

export class PayPremiumCall extends ethereum.Call {
  get inputs(): PayPremiumCall__Inputs {
    return new PayPremiumCall__Inputs(this);
  }

  get outputs(): PayPremiumCall__Outputs {
    return new PayPremiumCall__Outputs(this);
  }
}

export class PayPremiumCall__Inputs {
  _call: PayPremiumCall;

  constructor(call: PayPremiumCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isToken(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PayPremiumCall__Outputs {
  _call: PayPremiumCall;

  constructor(call: PayPremiumCall) {
    this._call = call;
  }
}

export class QuoteForStakingExternalCall extends ethereum.Call {
  get inputs(): QuoteForStakingExternalCall__Inputs {
    return new QuoteForStakingExternalCall__Inputs(this);
  }

  get outputs(): QuoteForStakingExternalCall__Outputs {
    return new QuoteForStakingExternalCall__Outputs(this);
  }
}

export class QuoteForStakingExternalCall__Inputs {
  _call: QuoteForStakingExternalCall;

  constructor(call: QuoteForStakingExternalCall) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get collateralWei(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get premiumWei(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get deadlineUTC(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get isTokenFee(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }
}

export class QuoteForStakingExternalCall__Outputs {
  _call: QuoteForStakingExternalCall;

  constructor(call: QuoteForStakingExternalCall) {
    this._call = call;
  }
}

export class RemoveStakingOfferCall extends ethereum.Call {
  get inputs(): RemoveStakingOfferCall__Inputs {
    return new RemoveStakingOfferCall__Inputs(this);
  }

  get outputs(): RemoveStakingOfferCall__Outputs {
    return new RemoveStakingOfferCall__Outputs(this);
  }
}

export class RemoveStakingOfferCall__Inputs {
  _call: RemoveStakingOfferCall;

  constructor(call: RemoveStakingOfferCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveStakingOfferCall__Outputs {
  _call: RemoveStakingOfferCall;

  constructor(call: RemoveStakingOfferCall) {
    this._call = call;
  }
}

export class RentNFTCall extends ethereum.Call {
  get inputs(): RentNFTCall__Inputs {
    return new RentNFTCall__Inputs(this);
  }

  get outputs(): RentNFTCall__Outputs {
    return new RentNFTCall__Outputs(this);
  }
}

export class RentNFTCall__Inputs {
  _call: RentNFTCall;

  constructor(call: RentNFTCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get isTokenFee(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RentNFTCall__Outputs {
  _call: RentNFTCall;

  constructor(call: RentNFTCall) {
    this._call = call;
  }
}

export class StakingOfferCall extends ethereum.Call {
  get inputs(): StakingOfferCall__Inputs {
    return new StakingOfferCall__Inputs(this);
  }

  get outputs(): StakingOfferCall__Outputs {
    return new StakingOfferCall__Outputs(this);
  }
}

export class StakingOfferCall__Inputs {
  _call: StakingOfferCall;

  constructor(call: StakingOfferCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _premium(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakingOfferCall__Outputs {
  _call: StakingOfferCall;

  constructor(call: StakingOfferCall) {
    this._call = call;
  }
}

export class StopRentalCall extends ethereum.Call {
  get inputs(): StopRentalCall__Inputs {
    return new StopRentalCall__Inputs(this);
  }

  get outputs(): StopRentalCall__Outputs {
    return new StopRentalCall__Outputs(this);
  }
}

export class StopRentalCall__Inputs {
  _call: StopRentalCall;

  constructor(call: StopRentalCall) {
    this._call = call;
  }

  get stakingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopRentalCall__Outputs {
  _call: StopRentalCall;

  constructor(call: StopRentalCall) {
    this._call = call;
  }
}

export class StopStakingCall extends ethereum.Call {
  get inputs(): StopStakingCall__Inputs {
    return new StopStakingCall__Inputs(this);
  }

  get outputs(): StopStakingCall__Outputs {
    return new StopStakingCall__Outputs(this);
  }
}

export class StopStakingCall__Inputs {
  _call: StopStakingCall;

  constructor(call: StopStakingCall) {
    this._call = call;
  }

  get stakingIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class StopStakingCall__Outputs {
  _call: StopStakingCall;

  constructor(call: StopStakingCall) {
    this._call = call;
  }
}

export class WhiteListNFTToggleCall extends ethereum.Call {
  get inputs(): WhiteListNFTToggleCall__Inputs {
    return new WhiteListNFTToggleCall__Inputs(this);
  }

  get outputs(): WhiteListNFTToggleCall__Outputs {
    return new WhiteListNFTToggleCall__Outputs(this);
  }
}

export class WhiteListNFTToggleCall__Inputs {
  _call: WhiteListNFTToggleCall;

  constructor(call: WhiteListNFTToggleCall) {
    this._call = call;
  }

  get nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get whitelist(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WhiteListNFTToggleCall__Outputs {
  _call: WhiteListNFTToggleCall;

  constructor(call: WhiteListNFTToggleCall) {
    this._call = call;
  }
}
